import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
import { loadUserData } from "./loadUserData";

// API KEY (pode vir de .env tamb√©m)
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "AIzaSyBf-CbefdcrB2pzbCWDMC5A4hYS9WpkPus");

const safetySettings = [
  { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

export const loadChatResponse = async (userId: number, mensagem: string): Promise<string> => {
    try {
      const model = genAI.getGenerativeModel({
        model: "gemini-2.0-flash",    
        generationConfig: {
          maxOutputTokens: 200,
        },
        safetySettings,
      });

         const userData = await loadUserData(userId)
         const finalUserMetricas = userData?.metricas[0]
         
         const finalUserData = {
            dados_usuario: userData?.dados_usuario,
            streak_caloria: userData?.streak_caloria || 0,
            streak_hidratacao: userData?.streak_hidratacao || 0,
            metricas: finalUserMetricas
         }
         const dataAtual = new Date().toLocaleDateString("pt-BR", {
          timeZone: "America/Sao_Paulo"
        });
        
      const chat = model.startChat({
        history: [
          {
            role: "user",
            parts: [
              {
                text: `
                Data atual: ${dataAtual}

                Esses aqui s√£o os dados do usu√°rio:
                ${JSON.stringify(finalUserData, null, 2)}
                const objetivos = {
                  1: "Perca de peso",
                  2: "Ganho de massa",
                  3: "Manuten√ß√£o do peso"
                };

                Voc√™ √© um assistente virtual especializado em sa√∫de. 
                Seu papel √© responder d√∫vidas de usu√°rios sobre alimenta√ß√£o saud√°vel, bem-estar, rotina de exerc√≠cios, sono, hidrata√ß√£o e outros temas relacionados √† sa√∫de de forma clara,
                √∫til e gentil. 
                Evite dar diagn√≥sticos m√©dicos, mas incentive h√°bitos saud√°veis e, se necess√°rio, recomende que o usu√°rio procure um profissional da sa√∫de.
                Se a pergunta envolver dados pessoais como email ou telefone, informe que n√£o √© poss√≠vel compartilhar essas informa√ß√µes.
                Seja direto e claro nas suas respostas.`,
              },
            ],
          },
          {
            role: "model",
            parts: [{ text: "Claro! Estou aqui para ajudar com informa√ß√µes sobre sa√∫de e bem-estar. üòä" }],
          },
        ],
      });
  
      const result = await chat.sendMessage(mensagem);
      const response = await result.response;
      return JSON.stringify({ text: response.text() }); // üëà JSON final
    } catch (error) {
      console.error("Erro ao gerar resposta do assistente de sa√∫de:", error);
      return "Desculpe, houve um erro ao gerar a resposta.";
    }}